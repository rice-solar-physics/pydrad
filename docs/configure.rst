Configure a Simulation
======================

HYDRAD requires setting many different configuration files, making it
difficult and tedious to configure a simulation by hand. Fortunately,
the ``pydrad`` package makes it easy to quickly configure a new
simulation using Python.

Rather than editing each configuration file individually, an entire
simulation can be configured using a single `Python
dictionary <https://docs.python.org/3/library/stdtypes.html#dict>`__.
Below is an example of a dictionary for configuring a simulation of a 80
Mm loop lasting 5000 s with a single heating pulse using an adaptive
grid. Many of the configuration options have been excluded for brevity.
A complete list of configuration parameters can be found in the `section
below <#configuration-parameters>`__.

.. code:: python

   >>> import astropy.units as u
   >>> config_dict = {
           'general': {
               'total_time': 5e3 * u.s,
               'loop_length': 80 * u.Mm,
               'footpoint_height': 5e8 * u.cm,
               # ... other config parameters ...
           },
           'initial_conditions': {
               'footpoint_temperature': 2e4 * u.K,
               'footpoint_density': 1e11 * u.cm**(-3),
               'isothermal': False,
               # ... other config parameters ...
           },
           'radiation': {
               'use_power_law_radiative_losses': True,
               # ... other config parameters ...
           },
           'heating': {
               'heat_electrons': True,
               'events': [
                   {'time_start': 0.*u.s, 'rise_duration': 100*u.s,
                   'decay_duration': 100*u.s, 'total_duration': 200*u.s,
                   'location': 4e9*u.cm, 'scale_height': 1e300 * u.cm,
                   'rate': 0.1 *u.erg/u.s/(u.cm**3), },
               ],
           },
           'solver': {
               'safety_radiation': 1.0,
               'safety_conduction': 1.0,
               'safety_advection': 1.0,
               'safety_atomic': 1.0,
               # ... other grid parameters ...
           },
           'grid': {
               'adapt': True,
               # ... other grid parameters ...
           }
       } 

The next step is to pass it to the ``pydrad`` class which can parse it
and print the needed configuration files,

.. code:: python

   >>> from pydrad import configure
   >>> c = configure.Configure(config)

And we can preview the different configuration files that setup the
HYDRAD simulation,

.. code:: python

   >>> print(c.initial_conditions_header)

.. code:: cpp

   // ****
   // *
   // * #defines for configuring the hydrostatic model
   // *
   // * (c) Dr. Stephen J. Bradshaw
   // *
   // * Source code generated by pydrad on 2018-03-26_00.38.59
   // *
   // ****

   // **** Output ****
   // **** End of Output ****

   // **** Physics ****
   #include "../../Radiation_Model/source/config.h"



   // **** Solver ****
   #define EPSILON 0.01

   // **** Grid ****
   #define ADAPT
   #define MIN_CELLS 150
   #define MAX_CELLS 30000
   #define MAX_REFINEMENT_LEVEL 12
   #define MIN_DS 1.0
   #define MAX_VARIATION 1.1

.. code:: python

   >>> print(c.initial_conditions_cfg)

::

   Initial_Conditions/profiles/initial.amr

   8000000000.0
   0.0
   500000000.0

   20000.0

   100000000000.0

   4000000000.0
   1e+300
   -8.0
   2.0
   0.001
   10000.0

   Configuration file generated by pydrad on 2018-03-26_00.42.20

.. code:: python

   >>> print(c.hydrad_header)

.. code:: cpp

   // ****
   // *
   // * #defines for configuring the hydrodynamic model
   // *
   // * (c) Dr. Stephen J. Bradshaw
   // *
   // * Source code generated by pydrad on 2018-03-26_00.59.38
   // *
   // ****

   // **** Output ****
   #define WRITE_FILE_PHYSICAL




   #define OUTPUT_EVERY_N_TIME_STEPS 1000
   // **** End of Output ****

   // **** Physics ****
   #include "../../Heating_Model/source/config.h"
   #include "../../Radiation_Model/source/config.h"
   #define HEAT_FLUX_LIMITING_COEFFICIENT 1.0
   #define TIME_STEP_LIMIT 1e-10

   #include "collisions.h"


   // **** End of Physics ****

   // **** Solver ****
   #define SAFETY_RADIATION 1.0
   #define SAFETY_CONDUCTION 1.0
   #define SAFETY_ADVECTION 1.0
   #define SAFETY_VISCOSITY 1.0
   #define TIME_STEP_INCREASE_LIMIT 1.05

   #define MINIMUM_RADIATION_TEMPERATURE 20000.0
   #define ZERO_OVER_TEMPERATURE_INTERVAL 500.0
   #define MINIMUM_TEMPERATURE 10000.0
   // **** End of Solver ****

   // **** Grid ****
   #define MAX_REFINEMENT_LEVEL 12
   #define ADAPT

   #define REFINE_ON_ELECTRON_ENERGY

   #define MIN_FRAC_DIFF 0.1
   #define MAX_FRAC_DIFF 0.2
   #define LINEAR_RESTRICTION

   // **** End of Grid ****

To print all configuration files, run the initial conditions, and copy
all of this to a new location,

.. code:: python

   c.setup_simulation('/path/to/simulation/dir/new_hydrad_sim',
                      base_path='/path/to/clean/HYDRAD')

This will create all of the needed input files from the options in
``config``, compile the initial conditions code, run
``Initial_Conditions.exe``, compile the main HYDRAD, and copy it all to
the directory ``/path/to/simulation/dir/new_hydrad_sim``.

Setting a Default Configuration
-------------------------------

HYDRAD requires a lot of configuration options and it can be annoying to
have put them all in a configuration file. To avoid this, you can load a
default configuration from an `ASDF
file <https://asdf.readthedocs.io>`__, a human-readable, structured
plain text file in the YAML format. These ASDF files are structured just
like the config directory and can be easily read and written.

To load a configuration from a file,

.. code:: python

   config = configure.Configure.load_config('/path/to/config/defaults.asdf')
   # Update configuration options in config
   c = configure.Configure(config)

And to save the configuration to disk,

.. code:: python

   c.save_config('/path/to/config/my_config.asdf')

An example default configuration file can be found in the root of the
`pydrad repository <https://github.com/wtbarnes/pydrad>`__.

Overriding Default Templates
----------------------------

If you make local modifications to the HYDRAD code, you may need
configuration options not in the included templates. To use custom
configuration options, you can inject your own modified templates of the
configuration files which take advantage of any custom options.

To see the available templates,

.. code:: python

   >>> c.templates
   ['coefficients.cfg',
    'collisions.h',
    'heating.cfg',
    'heating.config.h',
    'hydrad.cfg',
    'hydrad.config.h',
    'initial_conditions.cfg',
    'initial_conditions.config.h',
    'radiation.config.h',
    'radiation.elements.cfg']

Say we want to add an option, ``MY_NEW_PARAM`` to the ``collisions.h``
file. To get the current unrendered template,

.. code:: python

   >>> print(c.get_raw_template('collisions.h'))

::

   // ****
   // *
   // * #defines for configuring the shortest collisional coupling timescale
   // *
   // * (c) Dr. Stephen J. Bradshaw
   // *
   // * Source code generated by pydrad on {{ date }}
   // *
   // ****

   // **** Physics ****
   #define MINIMUM_COLLISIONAL_COUPLING_TIME_SCALE {{ general.minimum_collisional_coupling_timescale | units_filter('s') }}
   {% if general.force_single_fluid -%}#define FORCE_SINGLE_FLUID{%- endif %}
   // **** End of Physics ****

We can then create a new template with our new value,

.. code:: python

   new_collisions = """// ****
   // *
   // * #defines for configuring the shortest collisional coupling timescale
   // *
   // * (c) Dr. Stephen J. Bradshaw
   // *
   // * Source code generated by pydrad on {{ date }}
   // *
   // ****

   // **** Physics ****
   #define MINIMUM_COLLISIONAL_COUPLING_TIME_SCALE {{ general.minimum_collisional_coupling_timescale | units_filter('s') }}
   {% if general.force_single_fluid -%}#define FORCE_SINGLE_FLUID{%- endif %}
   // **** End of Physics ****
   #define MY_NEW_PARAM {{ general.my_new_param }}"""

add our new parameter to the configuration directory,

.. code:: python

   config['general']['my_new_param'] = 100

and then pass the template to the ``Configure`` object,

.. code:: python

   c_new = Configure(config, templates={'collisions.h': new_collisions})

Now take a look at your custom rendered template,

.. code:: python

   >>> print(c_new.collisions_header)

::

   // ****
   // *
   // * #defines for configuring the shortest collisional coupling timescale
   // *
   // * (c) Dr. Stephen J. Bradshaw
   // *
   // * Source code generated by pydrad on 2018-09-01_15.14.17
   // *
   // ****

   // **** Physics ****
   #define MINIMUM_COLLISIONAL_COUPLING_TIME_SCALE 0.01

   // **** End of Physics ****
   #define MY_NEW_PARAM 100

Configuration Parameters
------------------------

The tables below give an exhaustive list of all of the different HYDRAD
configuration options. If the units are listed, the input must have
units that can be converted to the listed unit with the `Astropy units
module <http://docs.astropy.org/en/stable/units/>`__,
e.g.Â ``loop_length`` can be input in Mm.

General
~~~~~~~

+------------+----------------------------+------------+--------------+
| Name       | Description                | Type       | Units        |
+============+============================+============+==============+
| total_time | Total duration of the      | ``int``    | s            |
|            | simulation                 |            |              |
+------------+----------------------------+------------+--------------+
| outpu      | How often results are      | ``int``    | s            |
| t_interval | printed to file            |            |              |
+------------+----------------------------+------------+--------------+
| l          | Footpoint-to-footpoint     | ``float``  | cm           |
| oop_length | distance of the coronal    |            |              |
|            | loop                       |            |              |
+------------+----------------------------+------------+--------------+
| loop_i     | Angle between loop and     | ``float``  | degree       |
| nclination | surface normal             |            |              |
+------------+----------------------------+------------+--------------+
| footpo     | Length of the chromosphere | ``float``  | cm           |
| int_height |                            |            |              |
+------------+----------------------------+------------+--------------+
| poly_f     | Coefficients (in order of  | array-like |              |
| it_gravity | increasing exponent) for   |            |              |
|            | 6th order polynomial fit   |            |              |
|            | to the field-aligned       |            |              |
|            | gravitational acceleration |            |              |
+------------+----------------------------+------------+--------------+
| pol        | Coefficients (in order of  | array-like |              |
| y_fit_magn | increasing exponent) for   |            |              |
| etic_field | 6th order polynomial fit   |            |              |
|            | to the magnetic field      |            |              |
|            | strength along the loop    |            |              |
+------------+----------------------------+------------+--------------+
| logging    | Frequency (in number of    | ``int``    |              |
| _frequency | timesteps) that progress   |            |              |
|            | is printed to the screen   |            |              |
+------------+----------------------------+------------+--------------+
| initia     | Adaptive mesh file to      | ``str``    |              |
| l_amr_file | initialize loop from; if   |            |              |
|            | not given, uses the result |            |              |
|            | from the initial           |            |              |
|            | conditions code            |            |              |
+------------+----------------------------+------------+--------------+
| write_fil  | Toggle writing ``.phy``    | ``bool``   |              |
| e_physical | solutions file             |            |              |
+------------+----------------------------+------------+--------------+
| write_     | Toggle writing ``.ine``    | ``bool``   |              |
| file_ion_p | file                       |            |              |
| opulations |                            |            |              |
+------------+----------------------------+------------+--------------+
| write_f    | Toggle writing ``.Hstate`` | ``bool``   |              |
| ile_hydrog | file                       |            |              |
| en_level_p |                            |            |              |
| opulations |                            |            |              |
+------------+----------------------------+------------+--------------+
| w          | Toggle writing ``.scl``    | ``bool``   |              |
| rite_file_ | file                       |            |              |
| timescales |                            |            |              |
+------------+----------------------------+------------+--------------+
| write      | Toggle writing ``.trm``    | ``bool``   |              |
| _file_equa |                            |            |              |
| tion_terms |                            |            |              |
+------------+----------------------------+------------+--------------+
| heat_flux_ | See Eq. A15 of             | ``float``  |              |
| limiting_c | `                          |            |              |
| oefficient | BC13 <https://doi.org/10.1 |            |              |
|            | 088/0004-637X/770/1/12>`__ |            |              |
+------------+----------------------------+------------+--------------+
| heat       | Minimum value the heat     | ``float``  | s            |
| _flux_time | flux will limit timestep   |            |              |
| step_limit | to                         |            |              |
+------------+----------------------------+------------+--------------+
| use_kin    | Toggle using kinetic model | ``bool``   |              |
| etic_model | for heat flux              |            |              |
+------------+----------------------------+------------+--------------+
| minimum_   |                            | ``float``  | s            |
| collisiona |                            |            |              |
| l_coupling |                            |            |              |
| _timescale |                            |            |              |
+------------+----------------------------+------------+--------------+
| force_si   | If true, force electron    | ``bool``   |              |
| ngle_fluid | and ion quantities to be   |            |              |
|            | equal                      |            |              |
+------------+----------------------------+------------+--------------+
| use_openmp | If true, parallelize over  | ``bool``   |              |
|            | threads with               |            |              |
|            | `OpenMP <ht                |            |              |
|            | tps://www.openmp.org/>`__. |            |              |
|            | This option is most useful |            |              |
|            | when including a NLTE      |            |              |
|            | chromosphere.              |            |              |
+------------+----------------------------+------------+--------------+
| open_field | If true, one footpoint is  | ``bool``   |              |
|            | assumed to not connect to  |            |              |
|            | the surface                |            |              |
+------------+----------------------------+------------+--------------+
| forc       |                            | ``bool``   |              |
| e_symmetry |                            |            |              |
+------------+----------------------------+------------+--------------+

Initial Conditions
~~~~~~~~~~~~~~~~~~

+------------+-----------------------------+------------+------------+
| Name       | Description                 | Type       | Units      |
+============+=============================+============+============+
| f          | Temperature at the loop     | ``float``  | K          |
| ootpoint_t | footpoint                   |            |            |
| emperature |                             |            |            |
+------------+-----------------------------+------------+------------+
| footpoi    | Density at the loop         | ``float``  | cm\ :ma    |
| nt_density | footpoint                   |            | th:`^{-3}` |
+------------+-----------------------------+------------+------------+
| heatin     | Loop coordinate where       | ``float``  | cm         |
| g_location | equilibrium heat is         |            |            |
|            | injected                    |            |            |
+------------+-----------------------------+------------+------------+
| heating_sc | Spatial scale of the        | ``float``  | cm         |
| ale_height | injected equilibrium        |            |            |
|            | heating                     |            |            |
+------------+-----------------------------+------------+------------+
| isothermal | If true, inital temperature | ``bool``   |            |
|            | profile is uniform          |            |            |
+------------+-----------------------------+------------+------------+
| heati      | Lower bound on rate search  | ``float``  | :math      |
| ng_range_l | range                       |            | :`\mathrm{ |
| ower_bound |                             |            | erg}\,\mat |
|            |                             |            | hrm{cm}^{- |
|            |                             |            | 3}\,\mathr |
|            |                             |            | m{s}^{-1}` |
+------------+-----------------------------+------------+------------+
| heati      | Upper bound on rate search  | ``float``  | :math      |
| ng_range_u | range                       |            | :`\mathrm{ |
| pper_bound |                             |            | erg}\,\mat |
|            |                             |            | hrm{cm}^{- |
|            |                             |            | 3}\,\mathr |
|            |                             |            | m{s}^{-1}` |
+------------+-----------------------------+------------+------------+
| hea        | Resolution of heating       | ``float``  |            |
| ting_range | search range                |            |            |
| _step_size |                             |            |            |
+------------+-----------------------------+------------+------------+
| heati      |                             | ``float``  |            |
| ng_range_f |                             |            |            |
| ine_tuning |                             |            |            |
+------------+-----------------------------+------------+------------+
| use_poly_f | If True, use polynomial fit | ``bool``   |            |
| it_gravity | to gravitational profile    |            |            |
+------------+-----------------------------+------------+------------+
| use_pol    | If True, use polynomial fit | ``bool``   |            |
| y_fit_magn | to magnetic field strength  |            |            |
| etic_field |                             |            |            |
+------------+-----------------------------+------------+------------+

Heating
~~~~~~~

+----------------+-----------------------+----------+-------+
| Name           | Description           | Type     | Units |
+================+=======================+==========+=======+
| heat_electrons | If false, only ions   | ``bool`` |       |
|                | are heated            |          |       |
+----------------+-----------------------+----------+-------+
| beam           | Toggle beam heating   | ``bool`` |       |
|                | model                 |          |       |
+----------------+-----------------------+----------+-------+
| alfven_wave    | Toggle AlfvÃ©n wave    | ``bool`` |       |
|                | heating model         |          |       |
+----------------+-----------------------+----------+-------+
| background     | Parameters for        | ``dict`` |       |
|                | configuring           |          |       |
|                | background heating    |          |       |
|                | profile               |          |       |
+----------------+-----------------------+----------+-------+
| events         | List of heating event | ``list`` |       |
|                | properties            |          |       |
+----------------+-----------------------+----------+-------+

The ``background`` dict can have the following keys. If it is not
included at all, no background heating is applied.

+------------+-----------------------------+----------+---------------+
| Name       | Description                 | Type     | Units         |
+============+=============================+==========+===============+
| us         | If true, use the heating    | ``bool`` |               |
| e_initial_ | parameters from the initial |          |               |
| conditions | conditions and the computed |          |               |
|            | equilibrium heating rate.   |          |               |
|            | If present, all other keys  |          |               |
|            | are ignored.                |          |               |
+------------+-----------------------------+----------+---------------+
| location   | Location of the energy      | `        | cm            |
|            | deposition                  | `float`` |               |
+------------+-----------------------------+----------+---------------+
| sc         | Spatial scale of the energy | `        | cm            |
| ale_height | deposition                  | `float`` |               |
+------------+-----------------------------+----------+---------------+
| rate       | Maximum heating rate        | `        | :ma           |
|            |                             | `float`` | th:`\mathrm{e |
|            |                             |          | rg}\,\mathrm{ |
|            |                             |          | cm}^{-3}\,\ma |
|            |                             |          | thrm{s}^{-1}` |
+------------+-----------------------------+----------+---------------+

Each entry in the ``events`` list should be a dictionary with the
following seven keys (and appropriate units) corresponding to each
heating event,

============== =======================================================
Name           Units
============== =======================================================
time_start     s
rise_duration  s
decay_duration s
total_duration s
location       cm
scale_height   cm
rate           :math:`\mathrm{erg}\,\mathrm{cm}^{-3}\,\mathrm{s}^{-1}`
============== =======================================================

Radiation
~~~~~~~~~

+------------+----------------------------+------------+--------------+
| Name       | Description                | Type       | Units        |
+============+============================+============+==============+
| use_power_ | If true, use piecewise     | ``bool``   |              |
| law_radiat | power-law to calculate     |            |              |
| ive_losses | radiative losses           |            |              |
+------------+----------------------------+------------+--------------+
| lo         | Path (relative to the root | ``str``    |              |
| okup_table | of the HYDRAD directory)   |            |              |
|            | to lookup table for        |            |              |
|            | radiative losses. Ignored  |            |              |
|            | unless                     |            |              |
|            | use_                       |            |              |
|            | power_law_radiative_losses |            |              |
|            | is also set.               |            |              |
+------------+----------------------------+------------+--------------+
| de         | If true, the               | ``bool``   |              |
| couple_ion | non-equilibrium population |            |              |
| ization_st | fractions are not fed back |            |              |
| ate_solver | into the radiative loss    |            |              |
|            | calculation. This option   |            |              |
|            | will be ignored unless a   |            |              |
|            | list of elements is also   |            |              |
|            | passed to                  |            |              |
|            | elements_nonequilibrium.   |            |              |
|            | If                         |            |              |
|            | use_                       |            |              |
|            | power_law_radiative_losses |            |              |
|            | is false, the equilibrium  |            |              |
|            | population fractions will  |            |              |
|            | be used to calculate the   |            |              |
|            | radiative losses.          |            |              |
+------------+----------------------------+------------+--------------+
| den        |                            | ``bool``   |              |
| sity_depen |                            |            |              |
| dent_rates |                            |            |              |
+------------+----------------------------+------------+--------------+
| optic      | If true, include optically | ``bool``   |              |
| ally_thick | thick lines in radiative   |            |              |
| _radiation | losses                     |            |              |
+------------+----------------------------+------------+--------------+
| nlte_ch    | Treat the chromosphere as  | ``bool``   |              |
| romosphere | being in non-local thermal |            |              |
|            | equilibrium. **NOTE: This  |            |              |
|            | may significantly increase |            |              |
|            | the computation time.**    |            |              |
+------------+----------------------------+------------+--------------+
| m          | Density floor of the       | ``float``  | cm\ :        |
| inimum_den | corona. This option is     |            | math:`^{-3}` |
| sity_limit | required if                |            |              |
|            | nlte_chromosphere is true  |            |              |
+------------+----------------------------+------------+--------------+
| rang       | Temperature and density    | ``str``    |              |
| es_dataset | ranges dataset             |            |              |
+------------+----------------------------+------------+--------------+
| emissivi   | Name of emissivity dataset | ``str``    |              |
| ty_dataset |                            |            |              |
+------------+----------------------------+------------+--------------+
| abundan    | Name of abundance dataset  | ``str``    |              |
| ce_dataset |                            |            |              |
+------------+----------------------------+------------+--------------+
| rat        | Name of                    | ``str``    |              |
| es_dataset | ionization/recombination   |            |              |
|            | rates dataset              |            |              |
+------------+----------------------------+------------+--------------+
| elements_e | Assume ionization          | ``list``   |              |
| quilibrium | equilibrium when           |            |              |
|            | calculating these          |            |              |
|            | population fractions       |            |              |
+------------+----------------------------+------------+--------------+
| ele        | Account for time-dependent | ``list``   |              |
| ments_none | ionization when            |            |              |
| quilibrium | calculating these          |            |              |
|            | population fractions       |            |              |
+------------+----------------------------+------------+--------------+

In the lists of equilibrium and non-equilibrium elements, each entry can
either be the atomic symbol, number, or the element name. As an example,
each entry in the list below (which includes hydrogen, helium, carbon,
and iron) is a valid element identifier,

.. code:: python

   elements = ['hydrogen', 'He', 'c', 26]

Solver
~~~~~~

+------------+----------------------------+------------+--------------+
| Name       | Description                | Type       | Units        |
+============+============================+============+==============+
| epsilon    |                            | ``float``  |              |
+------------+----------------------------+------------+--------------+
| safety     |                            | ``float``  |              |
| _radiation |                            |            |              |
+------------+----------------------------+------------+--------------+
| safety_    |                            | ``float``  |              |
| conduction |                            |            |              |
+------------+----------------------------+------------+--------------+
| safety     |                            | ``float``  |              |
| _advection |                            |            |              |
+------------+----------------------------+------------+--------------+
| saf        |                            | ``float``  |              |
| ety_atomic |                            |            |              |
+------------+----------------------------+------------+--------------+
| safety     |                            | ``float``  |              |
| _viscosity |                            |            |              |
+------------+----------------------------+------------+--------------+
| cutoff_io  | Population fractions below | ``float``  |              |
| n_fraction | this value are set to 0    |            |              |
+------------+----------------------------+------------+--------------+
| epsilon_d  | Safety factor for ion      | ``float``  |              |
|            | population solver; see     |            |              |
|            | `B09 <http://doi.org/10.10 |            |              |
|            | 51/0004-6361/200810735>`__ |            |              |
+------------+----------------------------+------------+--------------+
| epsilon_r  | Safety factor for ion      | ``float``  |              |
|            | population solver; see     |            |              |
|            | `B09 <http://doi.org/10.10 |            |              |
|            | 51/0004-6361/200810735>`__ |            |              |
+------------+----------------------------+------------+--------------+
| tim        | Allowed fractional         | ``float``  |              |
| estep_incr | difference (between 0 and  |            |              |
| ease_limit | 1) from 1 timestep to next |            |              |
+------------+----------------------------+------------+--------------+
| relati     |                            | ``float``  |              |
| ve_viscous |                            |            |              |
| _timescale |                            |            |              |
+------------+----------------------------+------------+--------------+
| minimum_r  |                            | ``float``  | K            |
| adiation_t |                            |            |              |
| emperature |                            |            |              |
+------------+----------------------------+------------+--------------+
| zero_over_ | Temperature interval over  | ``float``  | K            |
| temperatur | which the chromospheric    |            |              |
| e_interval | radiative losses are set   |            |              |
|            | to zero                    |            |              |
+------------+----------------------------+------------+--------------+
| minimum_t  |                            | ``float``  | K            |
| emperature |                            |            |              |
+------------+----------------------------+------------+--------------+
| maximum_op |                            | ``float``  | :math:`\math |
| tically_th |                            |            | rm{cm}^{-3}` |
| in_density |                            |            |              |
+------------+----------------------------+------------+--------------+
| cutoff_    | Ratio between cutoff       | ``float``  |              |
| temperatur | temperature and peak       |            |              |
| e_fraction | temperature. If set, use   |            |              |
|            | the method of              |            |              |
|            | `JB19 <https://doi.org/10  |            |              |
|            | .3847/2041-8213/ab0c1f>`__ |            |              |
|            | to model the transition    |            |              |
|            | region.                    |            |              |
+------------+----------------------------+------------+--------------+

Grid
~~~~

+------------+----------------------------+------------+--------------+
| Name       | Description                | Type       | Units        |
+============+============================+============+==============+
| adapt      | Toggle using adaptive mesh | ``bool``   |              |
|            | refinement                 |            |              |
+------------+----------------------------+------------+--------------+
| adap       | How often to adapt on time | ``int``    |              |
| t_every_n_ | step                       |            |              |
| time_steps |                            |            |              |
+------------+----------------------------+------------+--------------+
| maximum_   | The maximum allowed width  | ``float``  | cm           |
| cell_width | of any grid cell           |            |              |
+------------+----------------------------+------------+--------------+
| maxi       | The maximum number of      | ``int``    |              |
| mum_refine | times a grid cell can be   |            |              |
| ment_level | split; see                 |            |              |
|            | `                          |            |              |
|            | BC13 <https://doi.org/10.1 |            |              |
|            | 088/0004-637X/770/1/12>`__ |            |              |
+------------+----------------------------+------------+--------------+
| minim      | Smallest allowed grid cell | ``float``  | cm           |
| um_delta_s | width in the initial setup |            |              |
+------------+----------------------------+------------+--------------+
| maximum    |                            | ``float``  |              |
| _variation |                            |            |              |
+------------+----------------------------+------------+--------------+
| refine_    |                            | ``bool``   |              |
| on_density |                            |            |              |
+------------+----------------------------+------------+--------------+
| refin      |                            | ``bool``   |              |
| e_on_elect |                            |            |              |
| ron_energy |                            |            |              |
+------------+----------------------------+------------+--------------+
| refin      |                            | ``bool``   |              |
| e_on_hydro |                            |            |              |
| gen_energy |                            |            |              |
+------------+----------------------------+------------+--------------+
| minimum_f  | Minimum allowed difference | ``float``  |              |
| ractional_ | (between 0 and 1) between  |            |              |
| difference | adjacent cells             |            |              |
+------------+----------------------------+------------+--------------+
| maximum_f  | Maximum allowed difference | ``float``  |              |
| ractional_ | (between 0 and 1) between  |            |              |
| difference | adjacent cells             |            |              |
+------------+----------------------------+------------+--------------+
| linear_r   |                            | ``bool``   |              |
| estriction |                            |            |              |
+------------+----------------------------+------------+--------------+
| enforce_co |                            | ``bool``   |              |
| nservation |                            |            |              |
+------------+----------------------------+------------+--------------+

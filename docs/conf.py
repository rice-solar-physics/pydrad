import datetime

from packaging.version import Version

# -- Project information -----------------------------------------------------

project = 'pydrad'
author = 'Rice Solar Physics Group'
copyright = f'{datetime.datetime.now().year}, {author}'

# The full version, including alpha/beta/rc tags
from pydrad import __version__

_version = Version(__version__)
version = release = str(_version)
# Avoid "post" appearing in version string in rendered docs
if _version.is_postrelease:
    version = release = _version.base_version
# Avoid long githashes in rendered Sphinx docs
elif _version.is_devrelease:
    version = release = f"{_version.base_version}.dev{_version.dev}"
is_development = _version.is_devrelease
is_release = not(_version.is_prerelease or _version.is_devrelease)

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinxcontrib.bibtex',
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.doctest',
    'sphinx.ext.mathjax',
    'sphinx_automodapi.automodapi',
    'sphinx_automodapi.smart_resolver',
    'sphinx_design',
]
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
source_suffix = '.rst'
master_doc = 'index'
default_role = 'obj'
napoleon_use_rtype = False
napoleon_google_docstring = False

intersphinx_mapping = {
    'python': ('https://docs.python.org/3/',
               (None, 'http://data.astropy.org/intersphinx/python3.inv')),
    'numpy': ('https://docs.scipy.org/doc/numpy/',
              (None, 'http://data.astropy.org/intersphinx/numpy.inv')),
    'scipy': ('https://docs.scipy.org/doc/scipy/reference/',
              (None, 'http://data.astropy.org/intersphinx/scipy.inv')),
    'matplotlib': ('https://matplotlib.org/',
                   (None, 'http://data.astropy.org/intersphinx/matplotlib.inv')),
    'astropy': ('http://docs.astropy.org/en/stable/', None),
}


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'pydata_sphinx_theme'
html_theme_options = {
    "show_nav_level": 2,
    "logo": {
        "text": f"pydrad {version}",
    },
    "use_edit_page_button": True,
    "icon_links": [
        {
            "name": "GitHub",
            "url": "https://github.com/rice-solar-physics/pydrad",
            "icon": "fa-brands fa-github",
        },
    ],
}
html_logo = "_static/hydrad-logo.png"
html_context = {
    "github_user": "rice-solar-physics",
    "github_repo": "pydrad",
    "github_version": "main",
    "doc_path": "docs",
}
# Sidebar removal
html_sidebars = {
    "getting_started*": [],
    "config_tables*": [],
    "citation*": [],
    "references*": [],
}

bibtex_bibfiles = ['references.bib']

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Render inheritance diagrams in SVG
graphviz_output_format = "svg"

graphviz_dot_args = [
    '-Nfontsize=10',
    '-Nfontname=Helvetica Neue, Helvetica, Arial, sans-serif',
    '-Efontsize=10',
    '-Efontname=Helvetica Neue, Helvetica, Arial, sans-serif',
    '-Gfontsize=10',
    '-Gfontname=Helvetica Neue, Helvetica, Arial, sans-serif'
]


# -- Sphinx-gallery ----------------------------------------------------------
extensions += [
    'sphinx_gallery.gen_gallery',
]

sphinx_gallery_conf = {
    'examples_dirs': '../examples',
    'gallery_dirs': 'generated/gallery',
    # execute all examples except those that start with "skip_"
    'filename_pattern': '^((?!skip_).)*$',
    'default_thumb_file': '_static/hydrad-logo.png',
}


# -- Generate config parameter tables ------------------------------------------
import io
import pathlib
import yaml

from astropy.io import ascii
from astropy.table import Table
from jinja2 import Environment

with pathlib.Path('config_tables.yml').open() as f:
    config = yaml.safe_load(f)


def render_rst_table(section):
    table = Table(data=config[section])
    with io.StringIO() as f:
        ascii.write(table, format='rst', output=f)
        table_rendered = f.getvalue()
    return table_rendered


env = Environment()
env.filters['render_rst_table'] = render_rst_table

page = """
..
    NOTE: This file should not be edited directly! It is autogenerated
    in conf.py based on the information in config_tables.yml. If you
    need to edit the information in the config tables, please do so
    in the config_tables.yml file. Changes to this file will not persist
    after each docs build.

.. _pydrad-hydrad-configuration:

HYDRAD Configuration
====================

The tables below give an exhaustive list of all of the different HYDRAD
configuration options. If the units are listed, the input must have
units that can be converted to the listed unit with the `Astropy units
module <http://docs.astropy.org/en/stable/units/>`__,
e.g.Â ``loop_length`` can be input in Mm.

General
--------
{{ 'General' | render_rst_table }}

The ``poly_fit_gravity`` and ``poly_fit_magnetic_field`` entries are both
dictionaries and must contain the following keys,

{{ 'Polynomial Fit' | render_rst_table }}

Initial Conditions
------------------
{{ 'Initial Conditions' | render_rst_table }}

Heating
--------
{{ 'Heating' | render_rst_table }}

The ``background`` entry can have the following keys. If ``use_initial_conditions``
is set to ``True``, none of the other keys need be included

{{ 'Heating_bg' | render_rst_table }}

Each entry in the ``events`` list should be a dictionary with the
following seven keys (and appropriate units) corresponding to each
heating event. If the list is empty, it is assumed that the loop is not subject
to any heating events.

{{ 'Heating_events' | render_rst_table }}

Radiation
---------
{{ 'Radiation' | render_rst_table }}

In the lists of equilibrium and non-equilibrium elements, each entry can
either be the atomic symbol, number, or the element name. As an example,
each entry in the list below (which includes hydrogen, helium, carbon,
and iron) is a valid element identifier,

.. code:: python

   elements = ['hydrogen', 'He', 'c', 26]

Solver
-------
{{ 'Solver' | render_rst_table }}

Grid
-----
{{ 'Grid' | render_rst_table }}
"""

with pathlib.Path('config_tables.rst').open(mode='w') as f:
    f.write(env.from_string(page).render())
